{"version":3,"sources":["actions/docActions.ts","reducers/docReducer.ts","store/store.ts","components/NavBar.tsx","components/CodeEditor.tsx","pages/DocPage.tsx","theme.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DocActionTypes","initialDocState","client","doc","loading","errorMessage","rootReducer","combineReducers","docState","state","action","type","ATTACH_DOC","LOAD_DOC","ERROR","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","MenuAppBar","classes","React","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","className","AppBar","position","Toolbar","Typography","variant","IconButton","aria-label","aria-controls","aria-haspopup","onClick","event","currentTarget","color","Menu","id","keepMounted","onClose","MenuItem","width","marginTop","CodeEditor","props","dispatch","useDispatch","useEffect","shouldLoad","docKey","a","yorkie","createClient","process","activate","createDocument","attach","update","content","createText","sync","console","error","message","useSelector","Box","height","CircularProgress","Alert","severity","options","mode","lineNumbers","editorDidMount","editor","getRootObject","onChanges","changes","change","actor","from","to","getID","log","fromIdx","posFromIndex","toIdx","replaceRange","setValue","getValue","onBeforeChange","origin","text","indexFromPos","join","edit","DocPage","match","params","createMuiTheme","palette","store","createStore","undefined","applyMiddleware","thunk","App","ThemeProvider","CssBaseline","basename","path","exact","render","Math","random","toString","substring","component","window","location","hostname","ReactDOM","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.251dfad3.chunk.js","sourcesContent":["import { ActionCreator, Dispatch } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport yorkie, { Client, Document } from 'yorkie-js-sdk';\n\nimport { IDocState } from '../reducers/docReducer';\n\nexport enum DocActionTypes {\n  ATTACH_DOC = 'ATTACH_DOC',\n  LOAD_DOC = 'LOAD_DOC',\n  ERROR = 'ERROR',\n}\n\nexport interface AttachDocAction {\n  type: DocActionTypes.ATTACH_DOC;\n  client: Client;\n  doc: Document;\n}\n\nexport interface ILoadDocAction {\n  type: DocActionTypes.LOAD_DOC;\n  loading: boolean;\n}\n\nexport interface IErrorAction {\n  type: DocActionTypes.ERROR;\n  errorMessage: string;\n}\nexport type DocActions = AttachDocAction | ILoadDocAction | IErrorAction;\n\n/*<Promise<Return Type>, State Interface, Type of Param, Type of Action> */\nexport const AttachDocAction: ActionCreator<ThunkAction<\n  Promise<any>,\n  IDocState,\n  null,\n  AttachDocAction\n>> = (docKey: string) => {\n  return async (dispatch: Dispatch) => {\n    try {\n      const client = yorkie.createClient(\n        `${process.env.REACT_APP_YORKIE_RPC_ADDR}`,\n      );\n      await client.activate();\n\n      const doc = yorkie.createDocument('codepairs', docKey);\n      await client.attach(doc);\n\n      doc.update((root: any) => {\n        if (!root.content) {\n          root.createText('content');\n        }\n      });\n      await client.sync();\n\n      dispatch({ type: DocActionTypes.ATTACH_DOC, doc, client });\n    } catch (err) {\n      console.error(err);\n      dispatch({ type: DocActionTypes.ERROR, errorMessage: err.message });\n    }\n\n    dispatch({ type: DocActionTypes.LOAD_DOC, loading: false });\n  };\n};\n\nexport const loadDocAction: ActionCreator<ThunkAction<\n  any,\n  IDocState,\n  null,\n  ILoadDocAction\n>> = (shouldLoad: boolean) => (dispatch: Dispatch) =>\n  dispatch({ type: DocActionTypes.LOAD_DOC, loading: shouldLoad });\n","import { Reducer } from 'redux';\nimport { Client, Document } from 'yorkie-js-sdk';\n\nimport { DocActionTypes, DocActions } from '../actions/docActions';\n\nexport interface IDocState {\n  client: Client | null;\n  doc: Document | null;\n  loading: boolean;\n  errorMessage: string;\n}\n\nconst initialDocState: IDocState = {\n  client: null,\n  doc: null,\n  loading: false,\n  errorMessage: '',\n};\n\nexport const docReducer: Reducer<IDocState, DocActions> = (\n  state = initialDocState,\n  action,\n) => {\n  switch (action.type) {\n    case DocActionTypes.ATTACH_DOC: {\n      return {\n        ...state,\n        client: action.client,\n        doc: action.doc,\n      };\n    }\n    case DocActionTypes.LOAD_DOC: {\n      return {\n        ...state,\n        loading: action.loading,\n      };\n    }\n    case DocActionTypes.ERROR: {\n      return {\n        ...state,\n        errorMessage: action.errorMessage,\n        doc: null,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","/**\n * Imports from Redux:\n * applyMiddleware: Applies middleware to the dispatch method of the Redux store\n * combineReducers: Merges reducers into one\n * createStore: Creates a Redux store that holds the state tree\n * Store: The TS Type used for the store, or state tree\n **/\nimport { applyMiddleware, combineReducers, createStore, Store } from 'redux';\n\n/**\n * Thunk\n * Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch and getState as parameters.\n **/\nimport thunk from 'redux-thunk';\n// Import reducers and state type\nimport { IDocState, docReducer } from '../reducers/docReducer';\n\n// Create an interface for the application state\nexport interface IAppState {\n  docState: IDocState;\n}\n\n// Create the root reducer\nconst rootReducer = combineReducers<IAppState>({\n  docState: docReducer,\n});\n\n// Create a configure store function of type `IAppState`\nexport default function configureStore(): Store<IAppState, any> {\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\n  return store;\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function MenuAppBar() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Yorkie CodePair\n          </Typography>\n          <div>\n            <IconButton\n              aria-label=\"settings\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleMenu}\n              color=\"inherit\"\n            >\n              <SettingsIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={open}\n              onClose={handleClose}\n            >\n              <MenuItem onClick={handleClose}>Theme</MenuItem>\n              <MenuItem onClick={handleClose}>Editor Mode</MenuItem>\n              <MenuItem onClick={handleClose}>Tab Size</MenuItem>\n              <MenuItem onClick={handleClose}>Font Size</MenuItem>\n            </Menu>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\nimport { Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { IAppState } from '../store/store';\nimport { AttachDocAction, loadDocAction } from '../actions/docActions';\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/monokai.css';\n\ntype CodeEditorProps = {\n  docKey: string;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function CodeEditor(props: CodeEditorProps) {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  useEffect(() => {\n    dispatch(loadDocAction(true));\n    dispatch(AttachDocAction(props.docKey));\n    // TODO we need to understand more how to use useEffect.\n    // eslint-disable-next-line\n  }, []);\n\n  const loading = useSelector((state: IAppState) => state.docState.loading);\n  const client = useSelector((state: IAppState) => state.docState.client);\n  const doc = useSelector((state: IAppState) => state.docState.doc);\n  const errorMessage = useSelector(\n    (state: IAppState) => state.docState.errorMessage,\n  );\n\n  if (loading) {\n    return (\n      <Box height=\"100%\">\n        <CircularProgress color=\"secondary\" />\n      </Box>\n    );\n  }\n\n  if (errorMessage || client === null || doc === null) {\n    return (\n      <div className={classes.root}>\n        <Alert severity=\"error\">\n          {errorMessage || 'fail to attach document'}\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <CodeMirror\n      options={{ mode: 'xml', theme: 'monokai', lineNumbers: true }}\n      editorDidMount={(editor) => {\n        const root = doc.getRootObject() as any;\n        root.content.onChanges((changes: any) => {\n          for (const change of changes) {\n            if (change.type === 'content') {\n              const actor = change.actor;\n              const from = change.from;\n              const to = change.to;\n              const content = change.content || '';\n\n              if (actor !== client.getID()) {\n                console.log(\n                  `%c remote: ${from}-${to}: ${content}`,\n                  'color: skyblue',\n                );\n                const fromIdx = editor.posFromIndex(from);\n                const toIdx = editor.posFromIndex(to);\n                editor.replaceRange(content, fromIdx, toIdx, 'yorkie');\n              }\n            } else if (change.type === 'selection') {\n              const actor = change.actor;\n              if (actor !== client.getID()) {\n                // displayRemoteSelection(editor, change);\n              }\n            }\n          }\n        });\n\n        editor.setValue(root.content.getValue());\n      }}\n      onBeforeChange={(editor: any, change: any) => {\n        console.log(change.origin, change.text);\n        if (change.origin === 'yorkie' || change.origin === 'setValue') {\n          return;\n        }\n\n        const from = editor.indexFromPos(change.from);\n        const to = editor.indexFromPos(change.to);\n        const content = change.text.join('\\n');\n\n        doc.update((root: any) => {\n          root.content.edit(from, to, content);\n        });\n      }}\n    />\n  );\n}\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nimport NavBar from '../components/NavBar';\nimport CodeEditor from '../components/CodeEditor';\n\ntype DocPageProps = {\n  docKey: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function DocPage(props: RouteComponentProps<DocPageProps>) {\n  const classes = useStyles();\n  const docKey = props.match.params.docKey;\n\n  return (\n    <div className={classes.root}>\n      <NavBar />\n      <CodeEditor docKey={docKey} />\n    </div>\n  );\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Route, Redirect } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport configureStore from './store/store';\nimport DocPage from './pages/DocPage';\nimport theme from './theme';\n\nimport './App.css';\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <Router basename={process.env.PUBLIC_URL}>\n          <Route\n            path=\"/\"\n            exact\n            render={() => {\n              return (\n                <Redirect to={`/${Math.random().toString(36).substring(7)}`} />\n              );\n            }}\n          />\n          <Route path=\"/:docKey\" exact component={DocPage} />\n        </Router>\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}